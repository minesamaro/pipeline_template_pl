
Running model pipeline for data fold 1...
Label column '5y' found in metadata. Available columns: ['pid', 'study_yr', 'path', 'sct_slice_num_og', 'stage', '1y', '2y', '5y', '10y', 'fup_days', 'sct_nod_err']
C:\Users\HP\.conda\envs\pipeline\Lib\site-packages\lightning_fabric\loggers\csv_logs.py:195: UserWarning: Experiment logs directory C:\Users\HP\OneDrive - Universidade do Porto\Documentos\UNIVERSIDADE\Tese\pytorch_lightning_dl_pipeline_template/experiment_results/experiment_100\version_10 exists and is not empty. Previous log files in this directory will be deleted when the new ones are saved!
  rank_zero_warn(
C:\Users\HP\.conda\envs\pipeline\Lib\site-packages\pytorch_lightning\callbacks\model_checkpoint.py:617: UserWarning: Checkpoint directory C:\Users\HP\OneDrive - Universidade do Porto\Documentos\UNIVERSIDADE\Tese\pytorch_lightning_dl_pipeline_template/experiment_results/experiment_100/version_10/datafold_1/models exists and is not empty.
  rank_zero_warn(f"Checkpoint directory {dirpath} exists and is not empty.")
C:\Users\HP\.conda\envs\pipeline\Lib\site-packages\pytorch_lightning\trainer\connectors\data_connector.py:442: PossibleUserWarning: The dataloader, val_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 12 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
C:\Users\HP\.conda\envs\pipeline\Lib\site-packages\pytorch_lightning\trainer\connectors\data_connector.py:442: PossibleUserWarning: The dataloader, train_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 12 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
Test labels shape: torch.Size([2, 1])
tensor([[1.],
        [0.]], device='cuda:0')
Test predictions shape: torch.Size([2, 2])
tensor([[0.3114, 0.7285],
        [0.3626, 0.6741]], device='cuda:0')
Test binary predictions shape: torch.Size([2, 1])
tensor([[1],
        [1]], device='cuda:0')
Test labels shape: torch.Size([2, 1])
tensor([[1.],
        [0.]], device='cuda:0')
Test predictions shape: torch.Size([2, 2])
tensor([[1.6582e-03, 9.9999e-01],
        [3.0619e-04, 1.0000e+00]], device='cuda:0')
Test binary predictions shape: torch.Size([2, 1])
tensor([[1],
        [1]], device='cuda:0')
Test labels shape: torch.Size([2, 1])
tensor([[1.],
        [0.]], device='cuda:0')
Test predictions shape: torch.Size([2, 2])
tensor([[0.5517, 0.6046],
        [0.5515, 0.6165]], device='cuda:0')
Test binary predictions shape: torch.Size([2, 1])
tensor([[1],
        [1]], device='cuda:0')
Test labels shape: torch.Size([2, 1])
tensor([[1.],
        [0.]], device='cuda:0')
Test predictions shape: torch.Size([2, 2])
tensor([[0.4839, 0.4442],
        [0.4954, 0.4549]], device='cuda:0')
Test binary predictions shape: torch.Size([2, 1])
tensor([[0],
        [0]], device='cuda:0')
Test labels shape: torch.Size([2, 1])
tensor([[1.],
        [0.]], device='cuda:0')
Test predictions shape: torch.Size([2, 2])
tensor([[0.0631, 0.9409],
        [0.0628, 0.9421]], device='cuda:0')
Test binary predictions shape: torch.Size([2, 1])
tensor([[1],
        [1]], device='cuda:0')
Test labels shape: torch.Size([2, 1])
tensor([[1.],
        [0.]], device='cuda:0')
Test predictions shape: torch.Size([2, 2])
tensor([[0.3697, 0.4961],
        [0.3701, 0.4959]], device='cuda:0')
Test binary predictions shape: torch.Size([2, 1])
tensor([[1],
        [1]], device='cuda:0')
Test labels shape: torch.Size([2, 1])
tensor([[1.],
        [0.]], device='cuda:0')
Test predictions shape: torch.Size([2, 2])
tensor([[0.5270, 0.4554],
        [0.5276, 0.4548]], device='cuda:0')
Test binary predictions shape: torch.Size([2, 1])
tensor([[0],
        [0]], device='cuda:0')
Test labels shape: torch.Size([2, 1])
tensor([[1.],
        [0.]], device='cuda:0')
Test predictions shape: torch.Size([2, 2])
tensor([[0.6009, 0.4841],
        [0.6021, 0.4843]], device='cuda:0')
Test binary predictions shape: torch.Size([2, 1])
tensor([[0],
        [0]], device='cuda:0')
Test labels shape: torch.Size([2, 1])
tensor([[1.],
        [0.]], device='cuda:0')
Test predictions shape: torch.Size([2, 2])
tensor([[0.5478, 0.4805],
        [0.5465, 0.4805]], device='cuda:0')
Test binary predictions shape: torch.Size([2, 1])
tensor([[0],
        [0]], device='cuda:0')
Test labels shape: torch.Size([2, 1])
tensor([[1.],
        [0.]], device='cuda:0')
Test predictions shape: torch.Size([2, 2])
tensor([[0.4764, 0.4812],
        [0.4745, 0.4822]], device='cuda:0')
Test binary predictions shape: torch.Size([2, 1])
tensor([[1],
        [1]], device='cuda:0')
Test labels shape: torch.Size([2, 1])
tensor([[1.],
        [0.]], device='cuda:0')
Test predictions shape: torch.Size([2, 2])
tensor([[0.4663, 0.5089],
        [0.4655, 0.5105]], device='cuda:0')
Test binary predictions shape: torch.Size([2, 1])
tensor([[1],
        [1]], device='cuda:0')
Test labels shape: torch.Size([2, 1])
tensor([[1.],
        [0.]], device='cuda:0')
Test predictions shape: torch.Size([2, 2])
tensor([[0.4999, 0.5308],
        [0.4995, 0.5318]], device='cuda:0')
Test binary predictions shape: torch.Size([2, 1])
tensor([[1],
        [1]], device='cuda:0')
Test labels shape: torch.Size([2, 1])
tensor([[1.],
        [0.]], device='cuda:0')
Test predictions shape: torch.Size([2, 2])
tensor([[0.5632, 0.4523],
        [0.5626, 0.4529]], device='cuda:0')
Test binary predictions shape: torch.Size([2, 1])
tensor([[0],
        [0]], device='cuda:0')
Test labels shape: torch.Size([2, 1])
tensor([[1.],
        [0.]], device='cuda:0')
Test predictions shape: torch.Size([2, 2])
tensor([[0.5653, 0.4107],
        [0.5635, 0.4111]], device='cuda:0')
Test binary predictions shape: torch.Size([2, 1])
tensor([[0],
        [0]], device='cuda:0')
Test labels shape: torch.Size([2, 1])
tensor([[1.],
        [0.]], device='cuda:0')
Test predictions shape: torch.Size([2, 2])
tensor([[0.5478, 0.4297],
        [0.5449, 0.4306]], device='cuda:0')
Test binary predictions shape: torch.Size([2, 1])
tensor([[0],
        [0]], device='cuda:0')
Test labels shape: torch.Size([2, 1])
tensor([[1.],
        [0.]], device='cuda:0')
Test predictions shape: torch.Size([2, 2])
tensor([[0.5298, 0.4664],
        [0.5264, 0.4674]], device='cuda:0')
Test binary predictions shape: torch.Size([2, 1])
tensor([[0],
        [0]], device='cuda:0')
C:\Users\HP\.conda\envs\pipeline\Lib\site-packages\pytorch_lightning\trainer\connectors\data_connector.py:442: PossibleUserWarning: The dataloader, test_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 12 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
Error executing job with overrides: []
Traceback (most recent call last):
  File "C:\Users\HP\OneDrive - Universidade do Porto\Documentos\UNIVERSIDADE\Tese\pytorch_lightning_dl_pipeline_template\src\scripts\run_experiment_pipeline.py", line 54, in run_hyperparameter_grid_based_execution_pipeline
    run_experiment_pipeline(config)
  File "C:\Users\HP\OneDrive - Universidade do Porto\Documentos\UNIVERSIDADE\Tese\pytorch_lightning_dl_pipeline_template\src\scripts\run_experiment_pipeline.py", line 166, in run_experiment_pipeline
    model_pipeline.test_model()
  File "C:\Users\HP\OneDrive - Universidade do Porto\Documentos\UNIVERSIDADE\Tese\pytorch_lightning_dl_pipeline_template\src\modules\model\model_pipeline.py", line 77, in test_model
    self.pytorch_lightning_trainer.test(
  File "C:\Users\HP\.conda\envs\pipeline\Lib\site-packages\pytorch_lightning\trainer\trainer.py", line 742, in test
    return call._call_and_handle_interrupt(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\.conda\envs\pipeline\Lib\site-packages\pytorch_lightning\trainer\call.py", line 43, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\.conda\envs\pipeline\Lib\site-packages\pytorch_lightning\trainer\trainer.py", line 785, in _test_impl
    results = self._run(model, ckpt_path=ckpt_path)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\.conda\envs\pipeline\Lib\site-packages\pytorch_lightning\trainer\trainer.py", line 980, in _run
    results = self._run_stage()
              ^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\.conda\envs\pipeline\Lib\site-packages\pytorch_lightning\trainer\trainer.py", line 1016, in _run_stage
    return self._evaluation_loop.run()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\.conda\envs\pipeline\Lib\site-packages\pytorch_lightning\loops\utilities.py", line 181, in _decorator
    return loop_run(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\.conda\envs\pipeline\Lib\site-packages\pytorch_lightning\loops\evaluation_loop.py", line 122, in run
    return self.on_run_end()
           ^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\.conda\envs\pipeline\Lib\site-packages\pytorch_lightning\loops\evaluation_loop.py", line 244, in on_run_end
    self._on_evaluation_epoch_end()
  File "C:\Users\HP\.conda\envs\pipeline\Lib\site-packages\pytorch_lightning\loops\evaluation_loop.py", line 326, in _on_evaluation_epoch_end
    call._call_lightning_module_hook(trainer, hook_name)
  File "C:\Users\HP\.conda\envs\pipeline\Lib\site-packages\pytorch_lightning\trainer\call.py", line 146, in _call_lightning_module_hook
    output = fn(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\OneDrive - Universidade do Porto\Documentos\UNIVERSIDADE\Tese\pytorch_lightning_dl_pipeline_template\src\modules\model\resnet502d\pytorch_lightning_resnet50_2d_model.py", line 205, in on_test_epoch_end
    'test_accuracy': accuracy(
                     ^^^^^^^^^
  File "C:\Users\HP\.conda\envs\pipeline\Lib\site-packages\torchmetrics\functional\classification\accuracy.py", line 419, in accuracy
    return binary_accuracy(preds, target, threshold, multidim_average, ignore_index, validate_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\HP\.conda\envs\pipeline\Lib\site-packages\torchmetrics\functional\classification\accuracy.py", line 160, in binary_accuracy
    _binary_stat_scores_tensor_validation(preds, target, multidim_average, ignore_index)
  File "C:\Users\HP\.conda\envs\pipeline\Lib\site-packages\torchmetrics\functional\classification\stat_scores.py", line 68, in _binary_stat_scores_tensor_validation
    _check_same_shape(preds, target)
  File "C:\Users\HP\.conda\envs\pipeline\Lib\site-packages\torchmetrics\utilities\checks.py", line 39, in _check_same_shape
    raise RuntimeError(
RuntimeError: Predictions and targets are expected to have the same shape, but got torch.Size([2, 2]) and torch.Size([2, 1]).

Set the environment variable HYDRA_FULL_ERROR=1 for a complete stack trace.
